name: Glue Job CI/CD

# Trigger workflow on pushes to dev or main, and pull requests into main
on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [main]

jobs:
    test-glue-job:
    name: Test Glue Job
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Build and start the local Glue container using Docker Compose
      - name: Build and start Glue container
        run: docker compose up -d --build

      # Step 3: Run the Glue job inside the running container using spark-submit
      - name: Run Glue job using spark-submit
        run: |
          CONTAINER_ID=$(docker ps -qf "name=glue_pyspark")
          docker exec "$CONTAINER_ID" bash -c "cd /home/glue_user/workspace/glue_jobs && spark-submit glue_main.py"

  deploy-glue-job:
    name: Deploy Glue Job (main)
    # Only run on 'main' branch, and only after test-glue-job completes
    if: github.ref == 'refs/heads/main'
    needs: test-glue-job
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials using GitHub Secrets
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Upload the Glue script to the specified S3 path
      - name: Upload Glue script to S3
        run: aws s3 cp glue_jobs/glue_main.py ${{ secrets.S3_SCRIPT_PATH }}

      # Step 4: Create or update the Glue job using AWS CLI
      - name: Create or Update AWS Glue Job
        run: |
          JOB_NAME="${{ secrets.GLUE_JOB_NAME }}"
          SCRIPT_PATH="${{ secrets.S3_SCRIPT_PATH }}"
          ROLE_ARN="${{ secrets.GLUE_ROLE_ARN }}"

          echo "Checking if Glue job '$JOB_NAME' exists..."
          
          # If the job exists, update it with new script path and config
          if aws glue get-job --job-name "$JOB_NAME" >/dev/null 2>&1; then
            echo "Updating Glue job..."

            # Write the update config JSON
            echo '{
              "Command": {
                "Name": "glueetl",
                "ScriptLocation": "'"$SCRIPT_PATH"'",
                "PythonVersion": "3"
              }
            }' > job-update.json

            # Run update command
            aws glue update-job \
              --job-name "$JOB_NAME" \
              --job-update file://job-update.json
          
          # If the job doesn't exist, create it from scratch
          else
            echo "Creating Glue job..."

            # Write the create config JSON
            echo '{
              "Name": "'"$JOB_NAME"'",
              "Role": "'"$ROLE_ARN"'",
              "Command": {
                "Name": "glueetl",
                "ScriptLocation": "'"$SCRIPT_PATH"'",
                "PythonVersion": "3"
              },
              "GlueVersion": "4.0",
              "MaxCapacity": 2,
              "Timeout": 10
            }' > job-create.json

            # Run create command
            aws glue create-job --cli-input-json file://job-create.json
          fi
