name: Glue Job CI/CD

# Trigger workflow on pushes to dev or main, and pull requests into main
on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [main]

jobs:
  test-glue-job:
    name: Test Glue Job
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the Source code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Build and run local Glue environment using Docker Compose
      - name: Build and start Glue container
        run: docker compose up -d --build

      # Step 3: Run the Glue job using spark-submit inside the running container
      - name: Run Glue job using spark-submit
        run: |
          CONTAINER_ID=$(docker ps -qf "name=glue_pyspark")
          docker exec "$CONTAINER_ID" bash -c "cd /home/glue_user/workspace/glue_jobs && spark-submit glue_main.py"

  deploy-glue-job:
    name: Deploy Glue Job (main)
    if: github.ref == 'refs/heads/main' # Only deploy on main branch
    needs: test-glue-job # Run this job only after test-glue-job succeeds
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the source code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials from GitHub Secrets
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Upload Glue script to S3
      - name: Upload Glue script to S3
        run: aws s3 cp glue_jobs/glue_main.py ${{ secrets.S3_SCRIPT_PATH }}

      # Step 4: Create or update the Glue Job based on existence
      - name: Create or Update AWS Glue Job
        run: |
          # Set environment variables from secrets
          JOB_NAME="${{ secrets.GLUE_JOB_NAME }}"
          SCRIPT_PATH="${{ secrets.S3_SCRIPT_PATH }}"
          ROLE_ARN="${{ secrets.GLUE_ROLE_ARN }}"

          echo "Checking if Glue job '$JOB_NAME' exists..."

          # Check if the Glue job already exists
          if aws glue get-job --job-name "$JOB_NAME" >/dev/null 2>&1; then
            echo "Updating Glue job..."

            # If it exists, update the job's script location, command, and role
            aws glue update-job \
              --job-name "$JOB_NAME" \
              --job-update "$(jq -n \
                --arg scriptPath "$SCRIPT_PATH" \
                --arg role "$ROLE_ARN" \
                '{
                  Role: $role,
                  Command: {
                    Name: "glueetl",
                    ScriptLocation: $scriptPath,
                    PythonVersion: "3"
                  }
                }')"
          else
            echo "Creating Glue job..."

            # If it doesn't exist, create a new Glue job with full config
            aws glue create-job \
              --cli-input-json "$(jq -n \
                --arg name "$JOB_NAME" \
                --arg role "$ROLE_ARN" \
                --arg scriptPath "$SCRIPT_PATH" \
                '{
                  Name: $name,
                  Role: $role,
                  Command: {
                    Name: "glueetl",
                    ScriptLocation: $scriptPath,
                    PythonVersion: "3"
                  },
                  GlueVersion: "4.0",
                  MaxCapacity: 2,
                  Timeout: 10
                }')"
          fi
